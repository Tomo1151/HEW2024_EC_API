// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// MARK: Model User
model User {
  id                 String             @id @unique @default(cuid())
  username           String             @unique
  nickname           String?
  email              String             @unique
  bio                String?
  hashed_password    String
  homepage_link      String?
  icon_link          String?
  created_at         DateTime           @default(now())
  updated_at         DateTime           @default(now()) @updatedAt
  posts              Post[]
  cart_items         CartItem[]
  purchases          Purchase[]
  followers          Follow[]           @relation("asFollowee")
  followees          Follow[]           @relation("asFollower")
  reposts            Repost[]
  likes              Like[]
  sent_notification  Notification[]     @relation("asSender")
  received_notification Notification[] @relation("asRecepient")
  licensed_downloads LicensedDownload[]
  refresh_token      RefreshToken?
  product_ratings    ProductRating[]

  @@map("users")
}

// MARK: Model Post
model Post {
  id            String         @id @unique @default(cuid())
  content       String
  live_link     String?
  like_count    Int            @default(0)
  ref_count     Int            @default(0)
  comment_count Int            @default(0)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  author        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  images        PostImage[]
  product       Product?
  reposts       Repost[]       @relation("Repost")
  replies       Post[]         @relation("Reply")
  likes         Like[]
  tags          TaggedPost[]
  notifications Notification[] @relation("asNotification")
  replied_ref   Post?          @relation("Reply", fields: [repliedId], references: [id], onDelete: Cascade)
  userId        String
  repliedId     String?

  @@map("posts")
}

// MARK: Model PostImage
model PostImage {
  id         String @id @unique @default(cuid())
  image_link String @unique
  post       Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String

  @@map("post_images")
}

// MARK: Model Product
model Product {
  id             String     @id @unique @default(cuid())
  name           String
  price          Int?
  product_link   String?    @unique
  thumbnail_link String?    @unique
  live_release   Boolean
  release_date   DateTime   @default(now())
  created_at     DateTime   @default(now())
  updated_at     DateTime   @default(now()) @updatedAt
  post           Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  cart_items     CartItem[]
  postId         String     @unique
  Purchase       Purchase[]
  product_ratings ProductRating[]

  @@map("products")
}

// MARK: Model Repost
model Repost {
  id         String   @id @unique @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation("Repost", fields: [postId], references: [id], onDelete: Cascade)
  userId     String
  postId     String
  created_at DateTime @default(now())

  @@unique([userId, postId])
  @@map("reposts")
}

// MARK: Model Like
model Like {
  id     String @id @unique @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  created_at   DateTime     @default(now())
  userId String
  postId String

  @@unique([userId, postId])
  @@map("likes")
}

// MARK: Model Tag
model Tag {
  id           String       @id @unique @default(cuid())
  name         String       @unique
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now()) @updatedAt
  tagged_posts TaggedPost[]

  @@map("tags")
}

// MARK: Model TaggedPost
model TaggedPost {
  id     String @id @unique @default(cuid())
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId  String
  postId String

  @@unique([tagId, postId])
  @@map("tagged_posts")
}

// MARK: Model CartItem
model CartItem {
  id         String   @id @unique @default(cuid())
  amount     Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     String
  productId  String

  @@map("cart_items")
}

// MARK: Model Purchase
model Purchase {
  id             String   @id @unique @default(cuid())
  purchase_price Int
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId      String
  userId         String

  @@map("purchases")
}

// MARK: Model ProductRating
model ProductRating {
  id        String @id @unique @default(cuid())
  value     Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  userId    String

  @@unique([productId, userId])
  @@map("product_ratings")
}

// MARK: Model Follow
model Follow {
  id         String @id @unique @default(cuid())
  follower   User   @relation("asFollower", fields: [followerId], references: [id], onDelete: Cascade)
  followee   User   @relation("asFollowee", fields: [followeeId], references: [id], onDelete: Cascade)
  created_at   DateTime     @default(now())
  followerId String
  followeeId String

  @@unique([followerId, followeeId])
  @@map("follows")
}

// MARK: Model License
model License {
  id                 String             @id @unique @default(cuid())
  license_key        String             @unique
  used_count         Int?
  expires_at         DateTime
  created_at         DateTime           @default(now())
  licensed_downloads LicensedDownload[]

  @@map("licenses")
}

// MARK: Model LicensedDownload
model LicensedDownload {
  id        String  @id @unique @default(cuid())
  license   License @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  licensee  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseId String
  userId    String

  @@unique([licenseId, userId])
  @@map("licensed_downloads")
}

// MARK: Model RefreshToken
model RefreshToken {
  id         String   @id @unique @default(cuid())
  token      String   @unique
  updated_at DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique

  @@map("refresh_tokens")
}

// MARK: Model Notification
model Notification {
  id                 String             @id @unique @default(cuid())
  // type 0: follow, 1: like, 2: repost, 3: comment, 4: purchase, 5: license
  type               Int
  // content            String
  is_read            Boolean            @default(false)
  rel_post           Post?              @relation("asNotification", fields: [relPostId], references: [id], onDelete: Cascade)
  recepient          User               @relation("asRecepient", fields: [recepientId], references: [id], onDelete: Cascade)
  sender             User               @relation("asSender", fields: [senderId], references: [id], onDelete: Cascade)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @default(now()) @updatedAt
  // user_notifications UserNotification[]
  senderId           String
  recepientId        String
  relPostId          String?

  @@unique([type, senderId, recepientId, relPostId])
  @@map("notifications")
}

// model UserNotification {
//   id             String       @id @unique @default(cuid())
//   user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//   notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
//   userId         String
//   notificationId String

//   @@map("user_notifications")
// }
