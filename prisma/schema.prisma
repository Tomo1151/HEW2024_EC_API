// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @unique @default(cuid())
  username           String             @unique
  nickname           String?
  email              String             @unique
  bio                String?
  hashed_password    String
  homepage_link      String?
  icon_link          String?
  created_at         DateTime           @default(now())
  updated_at         DateTime           @default(now()) @updatedAt
  posts              Post[]
  cart_items         CartItem[]
  purchases          Purchase[]
  followers          Follow[]           @relation("Follower")
  followees          Follow[]           @relation("Followee")
  reposts            Repost[]
  likes              Like[]
  licensed_downloads LicensedDownload[]
  refresh_token      RefreshTokens?

  @@map("users")
}

model Post {
  id            String       @id @unique @default(cuid())
  content       String
  live_link     String?
  like_count    Int?
  ref_count     Int?
  comment_count Int?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @default(now()) @updatedAt
  author        User         @relation(fields: [userId], references: [id])
  product       Product?
  reply         Post[]       @relation("Reply")
  reposts       Repost[]     @relation("Repost")
  likes         Like[]
  tags          TaggedPost[]
  userId        String
  Post          Post?        @relation("Reply", fields: [postId], references: [id])
  postId        String?

  @@map("posts")
}

model Product {
  id             String     @id @unique @default(cuid())
  name           String
  price          Int?
  product_link   String?    @unique
  thumbnail_link String?    @unique
  live_release   Boolean
  release_date   DateTime   @default(now())
  created_at     DateTime   @default(now())
  updated_at     DateTime   @default(now()) @updatedAt
  post           Post       @relation(fields: [postId], references: [id])
  cart_items     CartItem[]
  postId         String     @unique
  Purchase       Purchase[]

  @@map("products")
}

model Repost {
  id     String @id @unique @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation("Repost", fields: [postId], references: [id])
  userId String
  postId String

  @@map("reposts")
}

model Like {
  id     String @id @unique @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
  userId String
  postId String

  @@map("likes")
}

model Tag {
  id           String       @id @unique @default(cuid())
  name         String
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now()) @updatedAt
  tagged_posts TaggedPost[]

  @@map("tags")
}

model TaggedPost {
  id     String @id @unique @default(cuid())
  tag    Tag    @relation(fields: [tagId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
  tagId  String
  postId String

  @@map("tagged_posts")
}

model CartItem {
  id         String   @id @unique @default(cuid())
  amount     Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  userId     String
  productId  String

  @@map("cart_items")
}

model Purchase {
  id             String   @id @unique @default(cuid())
  purchase_price Int
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt
  product        Product  @relation(fields: [productId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
  productId      String
  userId         String

  @@map("purchases")
}

model Follow {
  id         String @id @unique @default(cuid())
  follower   User   @relation("Follower", fields: [followerId], references: [id])
  followee   User   @relation("Followee", fields: [followeeId], references: [id])
  followerId String
  followeeId String

  @@map("follows")
}

model License {
  id                 String             @id @unique @default(cuid())
  license_key        String             @unique
  used_count         Int?
  expires_at         DateTime
  created_at         DateTime           @default(now())
  licensed_downloads LicensedDownload[]

  @@map("licenses")
}

model LicensedDownload {
  id        String  @id @unique @default(cuid())
  license   License @relation(fields: [licenseId], references: [id])
  licensee  User    @relation(fields: [userId], references: [id])
  licenseId String
  userId    String

  @@map("licensed_downloads")
}

model RefreshTokens {
  id         String   @id @unique @default(cuid())
  token      String   @unique
  updated_at DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique

  @@map("refresh_tokens")
}
